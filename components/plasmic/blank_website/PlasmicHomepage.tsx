// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wQ4RJSg4PPFwQX7RMUQQuF
// Component: 63eTzZR5MIRH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ProgrammingLanguage from "../../ProgrammingLanguage"; // plasmic-import: wZOIqidIYW86/component
import ProjectAudioAvatar from "../../ProjectAudioAvatar"; // plasmic-import: iWxKIIhnXwUN/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: wQ4RJSg4PPFwQX7RMUQQuF/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 63eTzZR5MIRH/css

import FlagDeSvgIcon from "./icons/PlasmicIcon__FlagDeSvg"; // plasmic-import: KVLmBNsiH-Az/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  screenLeft?: Flex__<"div">;
  who?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  whoText?: Flex__<"div">;
  h1?: Flex__<"h1">;
  svg?: Flex__<"svg">;
  seperatorLine?: Flex__<"div">;
  screenRight?: Flex__<"div">;
  projects?: Flex__<"div">;
  leftAlign01?: Flex__<"div">;
  dieseWebsite?: Flex__<"div">;
  dwText?: Flex__<"div">;
  rightAlign02?: Flex__<"div">;
  audioAvatar?: Flex__<"div">;
  aaText?: Flex__<"div">;
  projectAudioAvatar?: Flex__<typeof ProjectAudioAvatar>;
  leftAlign03?: Flex__<"div">;
  ruleAi?: Flex__<"div">;
  raText?: Flex__<"div">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__yk59C)}
          >
            <div
              data-plasmic-name={"screenLeft"}
              data-plasmic-override={overrides.screenLeft}
              className={classNames(projectcss.all, sty.screenLeft)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"who"}
                data-plasmic-override={overrides.who}
                hasGap={true}
                className={classNames(projectcss.all, sty.who)}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"76.4vw"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"50%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website/images/pxl202407081253481851Jpg.jpg",
                    fullWidth: 1900,
                    fullHeight: 1900,
                    aspectRatio: undefined
                  }}
                />

                <Stack__
                  as={"div"}
                  data-plasmic-name={"whoText"}
                  data-plasmic-override={overrides.whoText}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.whoText)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Patrick Hein"}
                  </h1>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__bp4WL)}
                  >
                    <FlagDeSvgIcon
                      data-plasmic-name={"svg"}
                      data-plasmic-override={overrides.svg}
                      className={classNames(projectcss.all, sty.svg)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kb8Nl
                      )}
                    >
                      {"Berlin, Germany"}
                    </div>
                  </Stack__>
                </Stack__>
              </Stack__>
            </div>
            <div
              data-plasmic-name={"seperatorLine"}
              data-plasmic-override={overrides.seperatorLine}
              className={classNames(projectcss.all, sty.seperatorLine)}
            />

            <div
              data-plasmic-name={"screenRight"}
              data-plasmic-override={overrides.screenRight}
              className={classNames(projectcss.all, sty.screenRight)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"projects"}
                data-plasmic-override={overrides.projects}
                hasGap={true}
                className={classNames(projectcss.all, sty.projects)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ozkWe
                  )}
                >
                  {"Projekte"}
                </div>
                <div
                  data-plasmic-name={"leftAlign01"}
                  data-plasmic-override={overrides.leftAlign01}
                  className={classNames(projectcss.all, sty.leftAlign01)}
                >
                  <div
                    data-plasmic-name={"dieseWebsite"}
                    data-plasmic-override={overrides.dieseWebsite}
                    className={classNames(projectcss.all, sty.dieseWebsite)}
                  >
                    <div
                      data-plasmic-name={"dwText"}
                      data-plasmic-override={overrides.dwText}
                      className={classNames(projectcss.all, sty.dwText)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1Hbu3
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___68QO
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Diese Website"}
                            </span>
                          </React.Fragment>
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ppqXt
                          )}
                        >
                          <ProgrammingLanguage
                            className={classNames(
                              "__wab_instance",
                              sty.programmingLanguage__oeLxz
                            )}
                            language={"typeScript"}
                          />

                          <ProgrammingLanguage
                            className={classNames(
                              "__wab_instance",
                              sty.programmingLanguage__g5LEm
                            )}
                            language={"nodeJs"}
                          />
                        </Stack__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__a6CJw
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "Diese Website ist an einem Tag entstanden. :) Das inkludiert eine "
                            }
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"CI/CD"}
                          </span>
                          <React.Fragment>
                            {"-Pipeline gem\u00e4\u00df "}
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"DevOps"}
                          </span>
                          <React.Fragment>{"-Standards mit "}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"GitHub Actions"}
                          </span>
                          <React.Fragment>
                            {
                              " - dadurch kann die Website bei Bedarf innerhalb von Minuten vollautomatisch angepasst werden.\n\nDie Pipeline ist auch besonders in dem Aspekt, dass sie an "
                            }
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Plasmic Studio"}
                          </span>
                          <React.Fragment>
                            {
                              ' "angeschlossen" ist, wodurch die Website visuell aufgebaut und der notwendige Code generiert wird - bei Bedarf mit sofortiger Anwendung auf die Website, auf der wir gerade sind.\n\nDie Pipeline erlaubt es mir auch, wie man beim Audio Avatar sehen kann, den Code der Website nachtr\u00e4glich zu \u00e4ndern.'
                            }
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"rightAlign02"}
                  data-plasmic-override={overrides.rightAlign02}
                  className={classNames(projectcss.all, sty.rightAlign02)}
                >
                  <div
                    data-plasmic-name={"audioAvatar"}
                    data-plasmic-override={overrides.audioAvatar}
                    className={classNames(projectcss.all, sty.audioAvatar)}
                  >
                    <div
                      data-plasmic-name={"aaText"}
                      data-plasmic-override={overrides.aaText}
                      className={classNames(projectcss.all, sty.aaText)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nGjTo
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zHgay
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Audio Avatar"}
                            </span>
                          </React.Fragment>
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tlRB
                          )}
                        >
                          <ProgrammingLanguage
                            className={classNames(
                              "__wab_instance",
                              sty.programmingLanguage__rw0Yg
                            )}
                            language={"typeScript"}
                          />

                          <ProgrammingLanguage
                            className={classNames(
                              "__wab_instance",
                              sty.programmingLanguage___6Rz7Y
                            )}
                            language={"nodeJs"}
                          />
                        </Stack__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__e5Y4D
                        )}
                      >
                        {"Audiodatei abspielen und beobachten!"}
                      </div>
                    </div>
                    <ProjectAudioAvatar
                      data-plasmic-name={"projectAudioAvatar"}
                      data-plasmic-override={overrides.projectAudioAvatar}
                      className={classNames(
                        "__wab_instance",
                        sty.projectAudioAvatar
                      )}
                    />
                  </div>
                </div>
                <div
                  data-plasmic-name={"leftAlign03"}
                  data-plasmic-override={overrides.leftAlign03}
                  className={classNames(projectcss.all, sty.leftAlign03)}
                >
                  <div
                    data-plasmic-name={"ruleAi"}
                    data-plasmic-override={overrides.ruleAi}
                    className={classNames(projectcss.all, sty.ruleAi)}
                  >
                    <div
                      data-plasmic-name={"raText"}
                      data-plasmic-override={overrides.raText}
                      className={classNames(projectcss.all, sty.raText)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__j4ELj
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xcVxF
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"RuleAI"}
                            </span>
                          </React.Fragment>
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rsTiA
                          )}
                        >
                          <ProgrammingLanguage
                            className={classNames(
                              "__wab_instance",
                              sty.programmingLanguage__mHcj0
                            )}
                            language={"python"}
                          />
                        </Stack__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__omw4V
                        )}
                      >
                        {
                          "L\u00e4sst Nutzer eine Chatregel aufstellen, die automatisch per KI kontrolliert wird - mit witzigen Antworten."
                        }
                      </div>
                    </div>
                  </div>
                </div>
              </Stack__>
            </div>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "screenLeft",
    "who",
    "img",
    "whoText",
    "h1",
    "svg",
    "seperatorLine",
    "screenRight",
    "projects",
    "leftAlign01",
    "dieseWebsite",
    "dwText",
    "rightAlign02",
    "audioAvatar",
    "aaText",
    "projectAudioAvatar",
    "leftAlign03",
    "ruleAi",
    "raText"
  ],
  screenLeft: ["screenLeft", "who", "img", "whoText", "h1", "svg"],
  who: ["who", "img", "whoText", "h1", "svg"],
  img: ["img"],
  whoText: ["whoText", "h1", "svg"],
  h1: ["h1"],
  svg: ["svg"],
  seperatorLine: ["seperatorLine"],
  screenRight: [
    "screenRight",
    "projects",
    "leftAlign01",
    "dieseWebsite",
    "dwText",
    "rightAlign02",
    "audioAvatar",
    "aaText",
    "projectAudioAvatar",
    "leftAlign03",
    "ruleAi",
    "raText"
  ],
  projects: [
    "projects",
    "leftAlign01",
    "dieseWebsite",
    "dwText",
    "rightAlign02",
    "audioAvatar",
    "aaText",
    "projectAudioAvatar",
    "leftAlign03",
    "ruleAi",
    "raText"
  ],
  leftAlign01: ["leftAlign01", "dieseWebsite", "dwText"],
  dieseWebsite: ["dieseWebsite", "dwText"],
  dwText: ["dwText"],
  rightAlign02: ["rightAlign02", "audioAvatar", "aaText", "projectAudioAvatar"],
  audioAvatar: ["audioAvatar", "aaText", "projectAudioAvatar"],
  aaText: ["aaText"],
  projectAudioAvatar: ["projectAudioAvatar"],
  leftAlign03: ["leftAlign03", "ruleAi", "raText"],
  ruleAi: ["ruleAi", "raText"],
  raText: ["raText"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  screenLeft: "div";
  who: "div";
  img: typeof PlasmicImg__;
  whoText: "div";
  h1: "h1";
  svg: "svg";
  seperatorLine: "div";
  screenRight: "div";
  projects: "div";
  leftAlign01: "div";
  dieseWebsite: "div";
  dwText: "div";
  rightAlign02: "div";
  audioAvatar: "div";
  aaText: "div";
  projectAudioAvatar: typeof ProjectAudioAvatar;
  leftAlign03: "div";
  ruleAi: "div";
  raText: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    screenLeft: makeNodeComponent("screenLeft"),
    who: makeNodeComponent("who"),
    img: makeNodeComponent("img"),
    whoText: makeNodeComponent("whoText"),
    h1: makeNodeComponent("h1"),
    svg: makeNodeComponent("svg"),
    seperatorLine: makeNodeComponent("seperatorLine"),
    screenRight: makeNodeComponent("screenRight"),
    projects: makeNodeComponent("projects"),
    leftAlign01: makeNodeComponent("leftAlign01"),
    dieseWebsite: makeNodeComponent("dieseWebsite"),
    dwText: makeNodeComponent("dwText"),
    rightAlign02: makeNodeComponent("rightAlign02"),
    audioAvatar: makeNodeComponent("audioAvatar"),
    aaText: makeNodeComponent("aaText"),
    projectAudioAvatar: makeNodeComponent("projectAudioAvatar"),
    leftAlign03: makeNodeComponent("leftAlign03"),
    ruleAi: makeNodeComponent("ruleAi"),
    raText: makeNodeComponent("raText"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
